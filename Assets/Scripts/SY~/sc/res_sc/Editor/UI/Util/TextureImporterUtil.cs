using System;using System.Collections.Generic;using System.Linq;using System.Text;using UnityEditor;using UnityEngine;using EditorTools.AssetBundle;namespace EditorTools.UI{    public class TextureImporterUtil    {        // 通道分离-alpha        public const int SPLIT_ALPHA = 1;        // 通道分离-rgb        public const int SPLIT_TEXTURE = 2;        // 透明的图片，使用压缩格式        public const int COMPRESS_ALPHA = 3;        // 真彩        public const int TRUE_COLOR = 4;

        public static TextureImporterPlatformSettings CreateImporterSetting(string name, int maxSize, TextureImporterFormat format
            , int compressionQuality = 100, bool allowsAlphaSplitting = false, TextureImporterCompression tc = TextureImporterCompression.Uncompressed)
        {
            TextureImporterPlatformSettings tips = new TextureImporterPlatformSettings();
            tips.overridden = true;
            tips.name = name;
            tips.maxTextureSize = maxSize;
            tips.format = format;
            tips.textureCompression = tc;
            tips.allowsAlphaSplitting = allowsAlphaSplitting;
            tips.compressionQuality = compressionQuality;

            return tips;
        }        public static void CreateReadableTextureImporter(string path)        {            TextureImporter importer = AssetImporter.GetAtPath(path) as TextureImporter;            importer.textureType = TextureImporterType.Default;            importer.npotScale = TextureImporterNPOTScale.None;            importer.isReadable = true;            importer.mipmapEnabled = false;//            importer.textureFormat = TextureImporterFormat.ARGB32;        }		public static bool CreateIconReadableTextureImporter(string path)		{			TextureImporter importer = AssetImporter.GetAtPath(path) as TextureImporter;
            //			importer.textureType = TextureImporterType.Default;
            //			importer.npotScale = TextureImporterNPOTScale.None;
            if (importer.isReadable && importer.mipmapEnabled)
            {
                return false;
            }
            importer.isReadable = true;			importer.mipmapEnabled = false;
            return true;		}        public static void CreateUnreadableTextureImporter(string path) {            TextureImporter importer = AssetImporter.GetAtPath(path) as TextureImporter;            importer.isReadable = false;//            importer.textureFormat = TextureImporterFormat.AutomaticCompressed;        }        public static void CreateMultipleSpriteImporter(string path, Rect[] rects, string[] spriteNames, Vector4[] borders, int width, int height, int maxSize, int type)        {            TextureImporter importer = AssetImporter.GetAtPath(path) as TextureImporter;            importer.textureType = TextureImporterType.Sprite;            importer.spriteImportMode = SpriteImportMode.Multiple;            importer.spritePixelsPerUnit = 100;            SpriteMetaData[] metaDatas = new SpriteMetaData[spriteNames.Length];            for(int i = 0; i < metaDatas.Length; i++)            {                SpriteMetaData metaData = new SpriteMetaData();                metaData.name = spriteNames[i];                Rect rect = rects[i];                if (rects.Length > 1) {                    metaData.rect = new Rect(rect.xMin * width + TextureClamper.BORDER, rect.yMin * height + TextureClamper.BORDER, rect.width * width - TextureClamper.BORDER * 2, rect.height * height - TextureClamper.BORDER * 2);                } else {                    metaData.rect = new Rect(rect.xMin * width, rect.yMin * height, rect.width * width, rect.height * height);                }                if(borders != null)                {                    metaData.border = borders[i];                }                metaData.pivot = new Vector2(0.5f, 0.5f);                metaDatas[i] = metaData;            }            importer.spritesheet = metaDatas;            importer.maxTextureSize = maxSize;            importer.isReadable = false;            importer.mipmapEnabled = false;            if (path.Contains("UI_Base")||path.Contains("UI_Mainui")) {                SetPlatformTextureSettings(importer, maxSize, TRUE_COLOR);            } else {                SetPlatformTextureSettings(importer, maxSize, type);            }        }        public static void SetPlatformTextureSettings(string path, int maxSize = 2048, int type = TextureImporterUtil.COMPRESS_ALPHA) {            if (path == null || path.Trim().Length == 0) {                return;            }            TextureImporter importer = AssetImporter.GetAtPath(path) as TextureImporter;            SetPlatformTextureSettings(importer, maxSize, type);        }        public static void SetPlatformTextureSettings(TextureImporter importer, int maxSize = 2048, int type = TextureImporterUtil.COMPRESS_ALPHA) {            if (importer == null) {                return;            }            switch (type) {                case SPLIT_ALPHA:                    importer.textureType = TextureImporterType.Default;            		importer.isReadable = false;            		importer.mipmapEnabled = false;                    importer.alphaSource = TextureImporterAlphaSource.None;					importer.wrapMode = TextureWrapMode.Clamp;					importer.filterMode = FilterMode.Bilinear;					importer.anisoLevel = 0;                    // importer.sRGBTexture = true;                    break;                case SPLIT_TEXTURE:                    importer.textureType = TextureImporterType.Sprite;					importer.spriteImportMode = SpriteImportMode.Multiple;					importer.spritePixelsPerUnit = 100f;					importer.anisoLevel = 0;                    importer.alphaSource = TextureImporterAlphaSource.FromInput;                    importer.alphaIsTransparency = true;                    importer.isReadable = false;					// importer.npotScale = TextureImporterNPOTScale.None;					importer.mipmapEnabled = false;					importer.wrapMode = TextureWrapMode.Clamp;					importer.filterMode = FilterMode.Bilinear;					importer.textureCompression = TextureImporterCompression.CompressedHQ;                    break;                case COMPRESS_ALPHA:                    importer.textureType = TextureImporterType.Sprite;					importer.spriteImportMode = SpriteImportMode.Multiple;					importer.spritePixelsPerUnit = 100f;					importer.anisoLevel = 0;                    importer.alphaSource = TextureImporterAlphaSource.FromInput;					importer.alphaIsTransparency = true;					importer.isReadable = false;					// importer.npotScale = TextureImporterNPOTScale.None;					importer.mipmapEnabled = false;					importer.wrapMode = TextureWrapMode.Clamp;					importer.filterMode = FilterMode.Bilinear;					importer.textureCompression = TextureImporterCompression.CompressedHQ;                    break;                case TRUE_COLOR:                    importer.textureType = TextureImporterType.Sprite;					importer.spriteImportMode = SpriteImportMode.Multiple;					importer.spritePixelsPerUnit = 100f;					importer.anisoLevel = 0;                    importer.alphaSource = TextureImporterAlphaSource.FromInput;					importer.alphaIsTransparency = true;					importer.isReadable = false;					// importer.npotScale = TextureImporterNPOTScale.None;					importer.mipmapEnabled = false;					importer.wrapMode = TextureWrapMode.Clamp;					importer.filterMode = FilterMode.Bilinear;                    importer.textureCompression = TextureImporterCompression.Uncompressed;                    break;            }            SetPlatformTextureSettingsSub(importer, type, maxSize);        }        // 设置分离通道图片资源格式        public static void SetPlatformTextureSettingsSub(TextureImporter importer, int type, int maxSize = 2048) {			TextureImporterPlatformSettings setting = new TextureImporterPlatformSettings();			setting.name = BuildTarget.Android.ToString ();			setting.maxTextureSize = maxSize;			setting.compressionQuality = 100;            SetPlatformTextureSettingsFormat(setting, type, BuildTarget.Android);            setting.overridden = true;			importer.SetPlatformTextureSettings(setting);			setting = new TextureImporterPlatformSettings();            setting.name = "iPhone";			setting.maxTextureSize = maxSize;			setting.compressionQuality = 100;            SetPlatformTextureSettingsFormat(setting, type, BuildTarget.iOS);            setting.overridden = true;			importer.SetPlatformTextureSettings(setting);			setting = new TextureImporterPlatformSettings();			setting.name = BuildTarget.StandaloneWindows64.ToString ();			setting.maxTextureSize = maxSize;			setting.compressionQuality = 100;            SetPlatformTextureSettingsFormat(setting, type, BuildTarget.StandaloneWindows64);            setting.overridden = true;			setting = new TextureImporterPlatformSettings();            setting.name = "Standalone";			setting.maxTextureSize = maxSize;			setting.compressionQuality = 100;            SetPlatformTextureSettingsFormat(setting, type, BuildTarget.StandaloneWindows);            setting.overridden = true;			importer.SetPlatformTextureSettings(setting);			setting = new TextureImporterPlatformSettings();            setting.name = "Default";			setting.maxTextureSize = maxSize;			setting.compressionQuality = 100;            SetPlatformTextureSettingsFormat(setting, type, BuildTarget.StandaloneWindows);			importer.SetPlatformTextureSettings(setting);		}        public static void SetPlatformTextureSettingsFormat(TextureImporterPlatformSettings setting, int type, BuildTarget target) {            if (target == BuildTarget.Android) {                switch (type) {                    case SPLIT_ALPHA:                        setting.format = TextureImporterFormat.ETC_RGB4;                        break;                    case SPLIT_TEXTURE:                        setting.format = TextureImporterFormat.ETC2_RGBA8;                        break;                    case TRUE_COLOR:                        setting.format = TextureImporterFormat.RGBA32;                        break;                    default:                        setting.format = TextureImporterFormat.ETC2_RGBA8;                        break;                }            } else if (target == BuildTarget.iOS) {                switch (type) {                    case SPLIT_ALPHA:                        setting.format = TextureImporterFormat.PVRTC_RGB4;                        break;                    case SPLIT_TEXTURE:                        setting.format = TextureImporterFormat.ASTC_4x4;                        break;                    case TRUE_COLOR:                        setting.format = TextureImporterFormat.RGBA32;                        break;                    default:                        setting.format = TextureImporterFormat.PVRTC_RGBA4;                        break;                }            } else {                switch (type) {                    case SPLIT_ALPHA:                        setting.format = TextureImporterFormat.DXT1;                        break;                    case SPLIT_TEXTURE:                        setting.format = TextureImporterFormat.DXT5;                        break;                    case TRUE_COLOR:                        setting.format = TextureImporterFormat.RGBA32;                        break;                    default:                        setting.format = TextureImporterFormat.DXT5;                        break;                }            }        }        public static void SetAtlasPackingTag(string path, string tag) {            TextureImporter importer = AssetImporter.GetAtPath(path) as TextureImporter;            importer.spritePackingTag = tag;        }    }}